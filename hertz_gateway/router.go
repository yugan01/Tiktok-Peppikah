// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"strings"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/loadbalance"
	"github.com/cloudwego/kitex/pkg/transmeta"
	"github.com/cloudwego/kitex/transport"
	"github.com/kitex-contrib/registry-nacos/resolver"

	gateway "orbital_demo/biz/gateway"
)

// customizeRegister registers customize routers.
func customizedRegister(r *server.Hertz) {
	r.GET("/", func(ctx context.Context, c *app.RequestContext) {
		c.JSON(http.StatusOK, "hertz-gateway is running")
	})

	registerGateway()
}

func registerGateway() {

	idlPath := "../idl/"
	c, err := os.ReadDir(idlPath)
	if err != nil {
		hlog.Fatalf("new thrift file provider failed: %v", err)
	}

	//Setting up Nacos registry
	nacosResolver, err := resolver.NewDefaultNacosResolver()
	if err != nil {
		hlog.Fatalf("err:%v", err)
	}

	if gateway.SvcMap == nil {
		gateway.SvcMap = make(map[string]genericclient.Client)
	}

	//Loop to create generic calls for all IDL files
	//Converts JSON to thrift binary
	for _, entry := range c {
		if entry.IsDir() || entry.Name() == "common.thrift" {
			continue
		}
		svcName := strings.ReplaceAll(entry.Name(), ".thrift", "")

		provider, err := generic.NewThriftFileProvider(entry.Name(), idlPath)
		if err != nil {
			hlog.Fatalf("new thrift file provider failed: %v", err)
			break
		}

		g, err := generic.JSONThriftGeneric(provider)
		if err != nil {
			hlog.Fatal(err)
		}

		loadBalancer := loadbalance.NewWeightedRoundRobinBalancer()
		//loadBalancer := loadbalance.NewWeightedRandomBalancer()

		cli, err := genericclient.NewClient(
			svcName,
			g,
			client.WithResolver(nacosResolver),
			client.WithTransportProtocol(transport.TTHeader),
			client.WithMetaHandler(transmeta.ClientTTHeaderHandler),
			client.WithLoadBalancer(loadBalancer),
		)

		if err != nil {
			hlog.Fatal(err)
		}

		gateway.SvcMap[svcName] = cli
		fmt.Println("Gateway generated for service ", svcName)
	}
}
